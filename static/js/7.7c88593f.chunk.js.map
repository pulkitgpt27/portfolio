{"version":3,"sources":["assets/images/skill.svg","components/ProgressBar/ProgressBar.tsx","components/SkillProgress/SkillProgress.tsx","components/DisplayLottie/DisplayLottie.tsx"],"names":["ProgressBar","width","React","value","setValue","className","style","SkillProgress","techStack","viewSkillBars","triggerOnce","duration","experience","map","exp","i","progressStyle","progressPercentage","Stack","illustration","animated","DisplayLottie","animationData","Build","alt","src","skills","defaultOptions","loop","autoplay","fallback","options","isClickToPauseDisabled"],"mappings":"4uhGAAe,MAA0B,kC,wCCqB1BA,EAdiC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACjD,EAA0BC,WAAe,MAAzC,mBAAOC,EAAP,KAAcC,EAAd,KAMA,OAJAF,aAAgB,WACdE,EAASH,MAIT,qBAAKI,UAAU,QAAQC,MAAO,CAAEL,MAAO,QAAvC,SACE,sBAAMK,MAAO,CAAEL,MAAM,GAAD,OAAKE,IAAWE,UAAU,gBC2BrCE,UAlCiB,WAC9B,OAAIC,IAAUC,cAEV,cAAC,IAAD,CAAQC,aAAW,EAACC,SAAU,IAA9B,SACE,sBAAKN,UAAU,mBAAf,UACE,sBAAKA,UAAU,aAAf,UACE,oBAAIA,UAAU,iBAAd,yBACCG,IAAUI,WAAWC,KAAI,SAACC,EAAKC,GAC9B,IAAMC,EAAgB,CACpBf,MAAOa,EAAIG,oBAEb,OACE,sBAAaZ,UAAU,QAAvB,UACE,4BAAIS,EAAII,QACR,cAAC,EAAD,CAAajB,MAAOe,EAAcf,UAF1Bc,SAQhB,qBAAKV,UAAU,eAAf,SACGc,IAAaC,SACZ,cAACC,EAAA,EAAD,CAAeC,cAAeC,IAE9B,qBAAKC,IAAI,SAASC,IAAKC,WAO5B,O,gCCxCT,0CAqBeL,IAdqC,SAAC,GAAuB,IACpEM,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVP,cAJuE,EAApBA,eAOrD,OACE,cAAC,WAAD,CAAUQ,SAAU,cAAC,IAAD,IAApB,SACE,cAAC,IAAD,CAAQC,QAASJ,EAAgBK,wBAAsB","file":"static/js/7.7c88593f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/skill.35a14766.svg\";","import * as React from \"react\";\r\n\r\nimport \"./ProgressBar.scss\";\r\n\r\ninterface ProgressBarProps {\r\n  width: string;\r\n}\r\nconst ProgressBar: React.FC<ProgressBarProps> = ({ width }) => {\r\n  const [value, setValue] = React.useState(\"0%\");\r\n\r\n  React.useEffect(() => {\r\n    setValue(width);\r\n  });\r\n\r\n  return (\r\n    <div className=\"meter\" style={{ width: \"100%\" }}>\r\n      <span style={{ width: `${value}` }} className=\"progress\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\nimport \"./Progress.scss\";\r\nimport { illustration, techStack } from \"../../config/strings\";\r\nimport { Bounce } from \"react-awesome-reveal\";\r\nimport skills from \"../../assets/images/skill.svg\";\r\nimport Build from \"../../assets/lottie/build.json\";\r\nimport DisplayLottie from \"../DisplayLottie/DisplayLottie\";\r\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\r\n\r\nconst SkillProgress: React.FC = () => {\r\n  if (techStack.viewSkillBars) {\r\n    return (\r\n      <Bounce triggerOnce duration={1000}>\r\n        <div className=\"skills-container\">\r\n          <div className=\"skills-bar\">\r\n            <h1 className=\"skills-heading\">Proficiency</h1>\r\n            {techStack.experience.map((exp, i) => {\r\n              const progressStyle = {\r\n                width: exp.progressPercentage\r\n              };\r\n              return (\r\n                <div key={i} className=\"skill\">\r\n                  <p>{exp.Stack}</p>\r\n                  <ProgressBar width={progressStyle.width} />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <div className=\"skills-image\">\r\n            {illustration.animated ? (\r\n              <DisplayLottie animationData={Build} />\r\n            ) : (\r\n              <img alt=\"Skills\" src={skills} />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Bounce>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default SkillProgress;\r\n","import React, { Suspense } from \"react\";\r\nimport Lottie from \"react-lottie\";\r\nimport Loading from \"../Loading/Loading\";\r\n\r\ninterface DisplayLottieProps {\r\n  animationData: any;\r\n}\r\nconst DisplayLottie: React.FC<DisplayLottieProps> = ({ animationData }) => {\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData\r\n  };\r\n\r\n  return (\r\n    <Suspense fallback={<Loading />}>\r\n      <Lottie options={defaultOptions} isClickToPauseDisabled />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default DisplayLottie;\r\n"],"sourceRoot":""}