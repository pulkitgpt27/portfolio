{"version":3,"sources":["components/ExperienceCard/ExperienceCard.tsx","containers/WorkExperience/WorkExperience.tsx"],"names":["ExperienceCard","cardInfo","isDark","imgRef","createRef","values","className","style","background","rgbColor","join","company","crossOrigin","ref","src","companylogo","alt","role","date","desc","descBullets","map","item","i","GetDescBullets","WorkExperience","useContext","StyleContext","workExperiences","display","id","triggerOnce","direction","duration","experience","card"],"mappings":"8LA8FeA,EA9EsC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC1DC,EAA4CC,sBAQlD,IANaC,EAsBb,OACE,sBAAKC,UAAWJ,EAAS,uBAAyB,kBAAlD,UACE,sBACEK,MAAO,CAAEC,YAzBFH,EAyBkBJ,EAASQ,SAxBb,qBAAXJ,EACV,GACA,OAASA,EAAOK,KAAK,MAAQ,MAuB7BJ,UAAU,oBAFZ,UAIE,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,yBAAf,SACE,oBAAIA,UAAU,0BAAd,SAAyCL,EAASU,YAGpD,qBACEC,YAAa,YACbC,IAAKV,EACLG,UAAU,wBACVQ,IAAKb,EAASc,YACdC,IAAKf,EAASU,aAGlB,sBAAKL,UAAU,0BAAf,UACE,oBACEA,UACEJ,EACI,sCACA,uBAJR,SAOGD,EAASgB,OAEZ,oBACEX,UACEJ,EACI,sCACA,uBAJR,SAOGD,EAASiB,OAEZ,mBACEZ,UACEJ,EACI,+CACA,gCAJR,SAOGD,EAASkB,OAEZ,6BA/DiB,SACrBC,EACAlB,GAEA,OAAOkB,EACHA,EAAYC,KAAI,SAACC,EAAMC,GAAP,OAChB,oBAEEjB,UAAWJ,EAAS,0BAA4B,WAFlD,SAIGoB,GAHIC,MAMP,KAkDKC,CAAevB,EAASmB,YAAalB,Y,sBC5CnCuB,UArCkB,WAC/B,IAAQvB,EAAWwB,qBAAWC,KAAtBzB,OACR,OAAI0B,IAAgBC,QAEhB,qBAAKC,GAAG,aAAR,SACE,cAAC,IAAD,CAAMC,aAAW,EAACC,UAAU,QAAQC,SAAU,IAA9C,SACE,qBAAK3B,UAAU,uBAAuBwB,GAAG,iBAAzC,SACE,gCACE,oBAAIxB,UAAU,qBAAd,yBACA,qBAAKA,UAAU,uBAAf,SACGsB,IAAgBM,WAAWb,KAAI,SAACc,EAAMZ,GACrC,OACE,cAAC,EAAD,CAEErB,OAAQA,EACRD,SAAU,CACRU,QAASwB,EAAKxB,QACdQ,KAAMgB,EAAKhB,KACXD,KAAMiB,EAAKjB,KACXT,SAAU0B,EAAK1B,SACfM,YAAaoB,EAAKpB,YAClBE,KAAMkB,EAAKlB,KACXG,YAAae,EAAKf,cATfG,iBAqBlB","file":"static/js/10.1414af31.chunk.js","sourcesContent":["import React, { createRef } from \"react\";\r\nimport \"./ExperienceCard.scss\";\r\n\r\ninterface CardInfoType {\r\n  company: string;\r\n  desc: string;\r\n  date: string;\r\n  companylogo: string;\r\n  role: string;\r\n  rgbColor?: Array<string>;\r\n  descBullets?: Array<string>;\r\n}\r\ninterface ExperienceCardType {\r\n  cardInfo: CardInfoType;\r\n  isDark: boolean;\r\n}\r\nconst ExperienceCard: React.FC<ExperienceCardType> = ({ cardInfo, isDark }) => {\r\n  const imgRef: React.RefObject<HTMLImageElement> = createRef();\r\n\r\n  function rgb(values?: Array<string>) {\r\n    return typeof values === \"undefined\"\r\n      ? \"\"\r\n      : \"rgb(\" + values.join(\", \") + \")\";\r\n  }\r\n\r\n  const GetDescBullets = (\r\n    descBullets: Array<string> | undefined,\r\n    isDark: boolean\r\n  ) => {\r\n    return descBullets\r\n      ? descBullets.map((item, i) => (\r\n        <li\r\n          key={i}\r\n          className={isDark ? \"subTitle dark-mode-text\" : \"subTitle\"}\r\n        >\r\n          {item}\r\n        </li>\r\n      ))\r\n      : null;\r\n  };\r\n\r\n  return (\r\n    <div className={isDark ? \"experience-card-dark\" : \"experience-card\"}>\r\n      <div\r\n        style={{ background: rgb(cardInfo.rgbColor) }}\r\n        className=\"experience-banner\"\r\n      >\r\n        <div className=\"experience-blurred_div\"></div>\r\n        <div className=\"experience-div-company\">\r\n          <h5 className=\"experience-text-company\">{cardInfo.company}</h5>\r\n        </div>\r\n\r\n        <img\r\n          crossOrigin={\"anonymous\"}\r\n          ref={imgRef}\r\n          className=\"experience-roundedimg\"\r\n          src={cardInfo.companylogo}\r\n          alt={cardInfo.company}\r\n        />\r\n      </div>\r\n      <div className=\"experience-text-details\">\r\n        <h5\r\n          className={\r\n            isDark\r\n              ? \"experience-text-role dark-mode-text\"\r\n              : \"experience-text-role\"\r\n          }\r\n        >\r\n          {cardInfo.role}\r\n        </h5>\r\n        <h5\r\n          className={\r\n            isDark\r\n              ? \"experience-text-date dark-mode-text\"\r\n              : \"experience-text-date\"\r\n          }\r\n        >\r\n          {cardInfo.date}\r\n        </h5>\r\n        <p\r\n          className={\r\n            isDark\r\n              ? \"subTitle experience-text-desc dark-mode-text\"\r\n              : \"subTitle experience-text-desc\"\r\n          }\r\n        >\r\n          {cardInfo.desc}\r\n        </p>\r\n        <ul>{GetDescBullets(cardInfo.descBullets, isDark)}</ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExperienceCard;\r\n","import React, { useContext } from \"react\";\r\nimport \"./WorkExperience.scss\";\r\nimport ExperienceCard from \"../../components/ExperienceCard/ExperienceCard\";\r\nimport { workExperiences } from \"../../config/strings\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport StyleContext from \"../../contexts/StyleContext\";\r\n\r\nconst WorkExperience: React.FC = () => {\r\n  const { isDark } = useContext(StyleContext);\r\n  if (workExperiences.display) {\r\n    return (\r\n      <div id=\"experience\">\r\n        <Fade triggerOnce direction=\"right\" duration={1000}>\r\n          <div className=\"experience-container\" id=\"workExperience\">\r\n            <div>\r\n              <h1 className=\"experience-heading\">Experiences</h1>\r\n              <div className=\"experience-cards-div\">\r\n                {workExperiences.experience.map((card, i) => {\r\n                  return (\r\n                    <ExperienceCard\r\n                      key={i}\r\n                      isDark={isDark}\r\n                      cardInfo={{\r\n                        company: card.company,\r\n                        desc: card.desc,\r\n                        date: card.date,\r\n                        rgbColor: card.rgbColor,\r\n                        companylogo: card.companylogo,\r\n                        role: card.role,\r\n                        descBullets: card.descBullets\r\n                      }}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Fade>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default WorkExperience;\r\n"],"sourceRoot":""}